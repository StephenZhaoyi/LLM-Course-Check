{
    "defaultCourse1": {
      "id": 1,
      "title": "Introduction to Informatics",
      "ects": 6,
      "moduleCode": "INHN0001",
      "description": "Learning Outcomes:\nAfter successfully completing this module, participants will understand the essential concepts of computer science at a fundamental, practice-oriented, yet scientific level. These concepts include algorithms, syntax and semantics, as well as efficiency in terms of memory usage and time23.\nParticipants will be able to solve manageable algorithmic problems in Java or a similar object-oriented language and program simple distributed and concurrent applications. They will understand the underlying concepts and models of these programming languages, enabling them to independently learn other assignment-oriented and object-oriented programming languages.\n\nContent:\nThe module covers the following topics:\n- Introduction\n- Basic concepts: Problem - Algorithm - Program\n- Imperative programming constructs\n- Syntax and Semantics\n  - Syntax of programming languages: regular expressions and context-free grammars\n  - Semantics of programs: control flow diagrams\n- Basic Data Structures I\n  - Numbers, strings, arrays\n  - Insertion sort\n  - Recursion\n  - Binary search\n  - Types of recursion\n- Basic Data Structures II\n  - Objects, classes, methods\n  - Lists, stacks, and queues\n- Object-Oriented Programming\n  - Inheritance\n  - Abstract classes and interfaces\n  - Polymorphism\n- Programming in the Large (Overview)\n- Concurrent Programming and Threads\n\nTeaching and Learning Methods:\nLectures combined with hands-on experimentation of examples on computers and exploration of additional literature to clarify technical details"
    },
    "defaultCourse2": {
      "id": 2,
      "title": "Fundamentals of Programming (Exercises & Laboratory)",
      "ects": 6,
      "moduleCode": "INHN0002",
      "description": "After successful completion of the module, participants are acquainted with the programming language Java or a similar object-oriented programming languae and master programming in the small. They are able to realize programs on their own and to apply the fundamental concepts of Informatics as taught in module IN0001, on a basic practical but scientific level.\n\nAccompanying the module IN0001, assignments may exercise and apply for problem solving concepts, such as:\n- basic data structures\n- recursion\n- objects, classes and methods\n- lists, queues, and trees\n- advanced concepts of object-oriented programming\n- concurrency\n\nApproximately a quarter of the module consists of the processing of exercises for the accompanying module IN0001. These exercises deepen the understanding of fundamental concepts of computer science. During the remainder of the time, the participants develop small sample applications under guidance to develop their programming skills in an object-oriented programming language."
    },
    "defaultCourse3": {
      "id": 3,
      "title": "Introduction to Computer Organization and Technology - Computer Architecture",
      "ects": 8,
      "moduleCode": "INHN0003",
      "description": "After attending this module students are able to understand computer systems as layered abstract machines. They get a first impression of the area of computer architectures and possess the following abilities:\nThey have learned to apply the main concepts of machine-oriented programming, microprogramming and circuit design. They understand the machine instruction cycles based on the underlying hardware at the register transfer level and they are able to classify computer architectures. They understand the basics of modern computer architecture.\n\n- Computer systems: basic architecture and organization: Von-Neumann-Computer, machine-instruction cycle, hardware-software interface\n- The Instruction Set Architecture (ISA): functionality and machine-oriented Assembler programming\n- Micro-programmed implementation of machine instructions\n- Circuits, sequential circuits, circuit design with a formal language using the example of VHDL\n- Introduction to computer architecture: microprocessor architectures and systems, parallel and distributed systems, memory systems, I/O"
    },
    "defaultCourse4": {
      "id": 4,
      "title": "Introduction to Software Engineering",
      "ects": 6,
      "moduleCode": "INHN0006",
      "description": "After successful completion of this module, students are familiar with the basic concepts and methods of the different phases of a project, e.g. modeling the problem, reuse of classes and components, and delivery of the software. They have the ability to select and apply suitable concepts and methods for concrete problems.\nThe students know the most important software engineering terms and workflows and are able to analyze and evaluate given problems. In addition, students can solve concrete problems in software engineering, e.g. with the help of design patterns.\n\nSoftware engineering is the establishment and systematic use of engineering principles, methods, and tools for the division of work, the development and application of extensive, complex software systems. It deals with the production and development of software, the organization and modelling of data structures and objects, and the operation of software systems. Topics of the lecture include, among others:\n- Modeling with UML\n- Process models in software development (linear, iterative, agile)\n- Requirements elicitation and analysis (functional model, dynamic model, and object model)\n- System design (specification, software architecture, architectural patterns, and design goals)\n- Object design and implementation (reuse, design patterns, and interface specification)\n- Testing (component test, integration test, and system test)\n- Configuration management, build management, and release management\n- Software maintenance and evolution\n- Project organization and communication"
    },
    "defaultCourse5": {
      "id": 5,
      "title": "Operating Systems and System Software",
      "ects": 6,
      "moduleCode": "INHN0007",
      "description": "Basic concepts: Operating systems; concurrency; parallel programming; low-level programming (processes, memory, communication, resource management); models (abstract, formal) for concurrency, e.g. petri nets; mutual exclusion, synchronization, deadlocks; compiler/linker/loader with library integration, transition to (adequate) hardware basic, machine-oriented programming and C; I/O especially as preparation for networking.\n\nBy means of a slide presentation, the lecture introduces the basic concepts and methods of operating systems and explains them using examples.\nAccompanying tutorials deepen the understanding of the concepts explained in the lecture by means of suitable group exercises and show the application of the different methods with the help of manageable problems in the different aspects of operating system decomposition.\nAdditional programming exercises enable students to deepen their knowledge in self-study. Feedback and help in programming tutoring sessions allow students to measure learning progress and improve their skills."
    },
    "defaultCourse6": {
      "id": 6,
      "title": "Fundamentals of Algorithms and Data Structures",
      "ects": 6,
      "moduleCode": "INHN0008",
      "description": "First, the module studies the basics of efficiency and complexity analyses. Basic terminology, complexity measures, the Landau symbols and different machine models are introduced. Then, fundamental data structures and algorithmic problems are studied.\n- Data structures for sequences: Dynamic arrays, lists, stacks and queues are investigated. The complexity of each operation is analyzed.\n- Hashing: Hashing with chaining, universal hashing as well as various probing methods are examined. Perfect hashing and hash-based algorithms, e.g. for set intersection problems, may also be explored.\n- Sorting: First, simple algorithms such as InsertionSort, SelectionSort and BubbleSort are reviewed. Then, advanced algorithms such as MergeSort, HeapSort and QuickSort are investigated. Furthermore, sorting-based algorithms, the lower bound for comparison-based sorting, selection, RadixSort and external sorting may be covered.\n- Priority queues: Binary heaps and binomial heaps are presented in the module.\n- Search trees: Binary search trees, AVL trees and (a,b)-trees are investigated.\n- Graph algorithms: Various graph representations, traversal techniques using DFS/BFS, the computation of 2-connected components and strongly connected components, topological sorting, the computation of the shortest paths and minimum spanning trees are covered. Approaches for solving the Traveling Salesman Problem (TSP) may be studied.\nThe module may also cover data compression schemes (Huffman, Lempel-Ziv) and simple pattern matching algorithms."
    },
    "defaultCourse7": {
      "id": 7,
      "title": "Fundamentals of Databases",
      "ects": 6,
      "moduleCode": "INHN0011",
      "description": "Students are able to apply the essential concepts of relational database systems and can use and evaluate them systematically and in a qualified manner.\nThe students have the expertise to systematically use a database system starting from the conceptual design to the implementation design to the physical design. They are able to formulate even complex queries in SQL and have a basic understanding of logical and physical optimization based on relational algebra. Furthermore they know how to safe-guard a database application with respect to recovery, concurrency control and authorization.\n\nSQL, data integrity, theory of relational database design, physical data organisation (storage structures, index structures), query processing, transaction management, main features of error handling (recovery, backup) and multiuser synchronisation, security aspects (authorization), XML data modeling (optional); in the tutorial the content is practiced along concrete examples"
    },
    "defaultCourse8": {
      "id": 8,
      "title": "Computer Networking and IT Security",
      "ects": 6,
      "moduleCode": "INHN0012",
      "description": "- Computer networking\n  ++ Overview: Computer networking and the Internet\n    +++ components (router, switches, clients, server)\n    +++ design (topology, routing, packets vs. virtual circuits)\n    +++ layered system structure (OSI and Internet)\n    +++ historical background\n  ++ concepts used by multiple layers (covered within the appropriate layers):\n    +++ Addressing\n    +++ Error detection\n    +++ Coding and modulation\n    +++ Media access protocols\n    +++ Flow control\n    +++ Connection management\n    +++ Packet vs. virtual circuit switching\n  ++ Layers:\n    +++ Application layer: application protocols and applications\n      ++++ Tasks and interface\n      ++++ Examples: HTTP, DNS, SMTP (Mail), Peer-to-Peer protocols\n    +++ Transport layer\n      ++++ Tasks and interface\n      ++++ Examples: TCP and UDP\n    +++ Network layer\n      ++++ Tasks and interface\n      ++++ Routing: link state vs. distance vector protocols\n      ++++ Addressing: IP Addresses\n      ++++ Examples: IP, Routing in the Internet\n    +++ Link layer\n      ++++ Tasks and interface\n      ++++ Examples: Ethernet, Wireless LAN\n    +++ Physical layer\n      ++++ Tasks and interface\n      ++++ Examples\n  ++ IT security\n    +++ Basics of cryptography\n    +++ Authentication, privacy, integrity\n    +++ Protocols with security mechanisms, e.g.: IPsec, PGP, Kerberos, SSL, SSH, ...\n    +++ Firewalls, intrusion detection"
    },
    "defaultCourse9": {
      "id": 9,
      "title": "Information Theory and Theoretical Informatics",
      "ects": 6,
      "moduleCode": "INHN0013",
      "description": "Formal languages, grammars, Chomsky hierarchy.\nRegular languages: DFA, NFA with and without ε-transitions, regular expressions and translations between them; systems of language equations; closure under boolean operations; Arden’s lemma; pumping lemma; decision problems; minimization; Myhill-Nerode theorem.\nCFLs: PDAs and translation between CFGs and PDAs; proof that DPDAs are weaker than PDAs; closure properties; CYK algorithm; pumping lemma; Chomsky and Greibach normal forms.\nContext-sensitive languages and LBAs.\nComputability: computability, decidability, semi-decidability, recursive-enumerability and their relationships; existence of non-computable problems; Turing machines, accepted languages, type-0 languages: equivalence of Turing machines, While-programs and Goto-programs; primitive and μ-recursive functions; reductions between problems; the Halting problem; universal Turing machines; Rice’s theorem; Rice-Shapiro theorem; undecidability of the Post Correspondence Problem and important problems on CFGs.\nComplexity theory: time and space complexity classes; polynomial-time reductions; the classes P and NP; NP-completeness; Cook’s theorem; important NP-complete problems and reductions between them.\nFoundations of information theory"
    },
    "defaultCourse10": {
      "id": 10,
      "title": "Introduction to Signal Processing",
      "ects": 6,
      "moduleCode": "INHN0016",
      "description": "Signals and systems in time and frequency domain, examples, discretization, filter and frequency transforms, compression, realization (signal processors), outlook to digital image processing"
    },
    "defaultCourse11": {
      "id": 11,
      "title": "Foundations of Cyber-Physical Systems",
      "ects": 8,
      "moduleCode": "INHN0018",
      "description": "On successful completion of the course, students will be able to:\n- explain the main concepts necessary to model, implement and analyze embedded systems\n- describe the architecture of embedded controllers\n- explain the interfacing between a controller and its physical environment (sensors and actuators) and its effects to the modeling of an embedded system\n- explain the principles and models of concurrent computation\n- calculate composition of state machines according to different kinds of composition\n- explain characteristics of multitasking program and scheduling policies\n- express and analyze simple specifications using temporal logic\n- explain the different techniques used to perform reachability and real-time analyses\n- model cyber-physical systems\n- design, analyze, and control cyber-physical systems on a basic level\n\nEmbedded systems control and regulate many applications in everyday life, from smart refrigerators, through elevator control, traffic control and safety, automotive systems, etc. to critical and distributed infrastructures. The design of an embedded system requires understanding of the controller’s architecture but also knowledge to handle the right integration of this controller with the sensors and actuators of the physical system. This course provides an understanding of the problems an engineer will face when designing an embedded system: the selection of the controller’s architecture, the interfacing with physical sensors and actuators, the modelling of the system and the interaction between its software and hardware components, as well as the analysis of its reachability and real-time performance. This course will emphasize on designing highly confident systems with real-time and concurrent behaviors. This course will also emphasize the similarities and differences between the following architectures of controllers: programmable logic controllers (PLC), single-board computers (SBC), and field-programmable gate arrays (FPGA)."
    },
    "defaultCourse12": {
      "id": 12,
      "title": "Enterprise Architecture Management and Reference Models",
      "ects": 6,
      "moduleCode": "INHN0017",
      "description": "Students possess specific knowledge of Enterprise Architecture Management, involving corresponding models, methods, metrics, visualizations and tools. Furthermore, students are able to:\n- understand organizational information systems and their inter-organizational integration\n- evaluate the design and the main relationships of the information logistics of organizational information systems within selected organizational functions\n- apply modeling techniques for complex business models\n- evaluate reference models based on the organizational context\n\nContent:\n- Enterprise Architecture Management\n- Case studies\n- Reference modeling\n- Domain-specific reference models\n- Logistic (Procurement & Distribution)\n- Accounting\n- Production I: Overview and Requirements Planning I\n- Production II: Requirements Planning II\n- Production III: Time and Capacity Planning\n- Supply Chain Management (SCM)\n- Service Data Management"
    },
    "defaultCourse13": {
      "id": 13,
      "title": "Business Process Management",
      "ects": 5,
      "moduleCode": "INHN0019",
      "description": "After participating in this module, students are able to understand business processes and their interaction with IT Technology. Furthermore, they are able to analyze and create Business Process Management-Projects. Students are able to evaluate the interaction of Information and Communication Technology and business processes and to improve these.\n\nContent:\nBusiness Process Management: Knowledge and understanding in the field of business processes and the role of technology herein.\n• Business processes and the way they build the success of firms and institutions.\n• Modeling and criteria of business processes and their opportunities and possibilities.\n• Business processes: Risk management, decision making and successful control and change.\n• Developments in technology and their implications for organizations.\n• The role of IT in modern business and competition: What technology should my firm invest in?"
    },
    "defaultCourse14": {
      "id": 14,
      "title": "Discrete Structures",
      "ects": 8,
      "moduleCode": "INHN0004",
      "description": "On successful completion of the module, students will be able to:\n- understand the elementary vocabulary of discrete mathematics and use logic, algebraic und algorithmic calculi,\n- solve combinatoric problems,\n- model and solve problems using graph theory, and\n- do a quantitative analysis of the efficiency of algorithms.\n\nContent:\nThe lecture introduces elementary concepts and important areas of discrete mathematics that are relevant for informatics students. It covers the following five topics:\n1) Basic concepts of sets, relations and functions:\n   - sets: basic operations, equivalence laws, KV-diagram, countable and uncountable sets, Cantor's Theorem\n   - relations: join, transitive hull, relational algebra\n   - functions: basic properties, composition, inverse\n2) Fundamentals of Propositional Logic and First-Order Logic:\n   - Propositional Logic:\n       * syntax and semantics\n       * truth tables and their connection to KV-diagrams\n       * equivalence laws\n       * CNF, DNF, normalization procedure, equisatisfiability\n       * SAT-procedure: DPLL, resolution, proof of correctness\n       * modeling with propositional logic\n   - Predicate Logic:\n       * syntax and semantics\n       * equivalence laws\n       * modeling with predicate logic\n3) Basics of combinatorics:\n   - counting principles\n   - drawing of balls from urns: variations, permutations, combinations\n   - binomial coefficients: symmetry, identities of Pascal and Vandermonde\n   - distribution problems\n   - Stirling-numbers of the first and second kind\n   - ordered and unordered partition functions\n   - application: load distribution\n4) Basics of graph theory:\n   - basic definitions\n   - trees\n   - Euler and Hamilton circuits: Euler's theorem, theorems of Dirac and Ore\n   - planar graphs: Euler's polyhedron formula, Kuratowski's theorem\n   - matchings: marriage theorem, augmenting paths\n   - matchings with preferences: Gale-Shapley's theorem\n5) Algebraic basics:\n   - basic definitions: algebra, group, ring, field\n   - groups:\n       * order: Lagrange's theorem, generator, group exponent\n       * cyclic groups\n       * basics of number theory: largest common divisor, extended euclidean algorithm, Euler's phi function\n       * multiplicative groups of integers modulo n\n       * RSA"
    },
    "defaultCourse15": {
      "id": 15,
      "title": "Linear Algebra",
      "ects": 8,
      "moduleCode": "INHN0009",
      "description": "After having attended this module, the students are familiar with the basic notions and methods of linear algebra. They are proficient in vector and matrix calculus as well as in the theory and application of linear mappings including their representation by matrices, and they are aware of determinants and eigenvalues as an essential characteristic of matrices. The students can handle the objects of linear algebra in computational and algorithmic ways, and can apply this to problems in computer science.\n\nContent:\n- Complex numbers\n- Vector and matrix calculus\n- Systems of linear equations\n- Vector spaces\n- Linear combinations and bases\n- Dimension\n- Linear maps and representation matrices\n- Determinants\n- Eigenvalues\n- Scalar products\n- Symmetric matrices"
    },
    "defaultCourse16": {
      "id": 16,
      "title": "Calculus",
      "ects": 8,
      "moduleCode": "INHN0014",
      "description": "Having attended this module, the students are able to understand the elementary notions and methods of real analysis as well as of convergence and approximation. They are moreover able to apply the methods of differential calculus of functions of a single and of several variables, as well as of integral calculus of a function of a single variable, and they understand important function classes and simple examples of differential equations.\n\nContent:\nBasics on real numbers:\n- Ordering of the real numbers\n- Infimum, supremum\n- Rational numbers are dense in the reals\n- Triangle inequality, Cauchy Schwarz inequality\n\nSequences:\n- Convergence in C and R\n- Improper convergence (convergence to plus/minus infinity)\n- Properties of limits\n- asymptotic equality of sequences\n- monotone sequences\n\nSeries:\n- Convergence and absolute convergence of series\n- Important examples: harmonic series, geometric series, exponential series, alternating series\n- Criteria for convergence (among others comparison test, ratio test)\n- Rearrangement, Cauchy product\n\nContinuity:\n- Intermediate value theorem\n- Minima and maxima of continuous functions\n- Compact sets\n- Inverse functions\n\nImportant classes of functions:\n- Polynomials\n- Rational functions\n- Exponential function and logarithm\n- Trigonometric functions\n\nDifferentiability of functions of a single variable:\n- Landau symbols\n- Differentiation rules (product rule, quotient rule, chain rule, derivative of the inverse function)\n- Mean value theorem\n- Higher derivatives\n- Taylor formula\n- Power series\n- L'Hospital's rule\n- Curve sketching\n\nIntegration in one variable:\n- Fundamental theorem of calculus\n- Antiderivative\n- Integration by parts, substitution rule\n- Improper integrals\n- Integrals depending on a parameter\n\nDifferential calculus of functions of several variables:\n- partial derivatives, gradient, Jacobi and Hesse matrix\n- Necessary and sufficient criteria for local extrema\n- Plane curves\n\nElementary introduction to differential equations:\n- Classification, examples\n- Initial value problems for separable equations\n- Linear differential equations"
    },
    "defaultCourse17": {
      "id": 17,
      "title": "Discrete Probability Theory",
      "ects": 6,
      "moduleCode": "INHN0020",
      "description": "After successful completion of the module:\n- Participants are familiar with important concepts of discrete and continuous probability spaces and stochastic processes and can in large part deduce them themselves\n- Master calculation rules for the determination and estimation of probabilities, expected values and variances\n- Are able to map real problems to abstract probability spaces\n- Can easily apply simple statistical tests\n\nContent:\n- Fundamentals of (discrete) probability theory\n  ++ probability spaces, events, principle of inclusion/exclusion, Boolean inequality, conditional probability, multiplication theorem, total probability theorem, Bayesian theorem, independence\n  ++ random variables, expected value, variance, linearity of expected value, conditional random variables and their expected value, variance, moments and central moments, several random variables and their common density & distribution, independence from random variables, moments of composite random variables, indicator variables\n  ++ discrete distributions: Bernoulli distribution, binomial distribution, geometric distribution, coupon collector problem, Poisson distribution, relationships among distributions\n  ++ methods for estimating probabilities, inequalities of Markov and Chebyshev, Chernoff barriers\n  ++ Law of large numbers\n  ++ Probability-generating functions and their application to distributions, moment-generating functions with various applications\n- continuous probability spaces\n  ++ continuous random variables, Kolmogorov axioms, sigma algebras, Lebesgue integrals, computing with continuous random variables, simulation of random variables\n  ++ continuous distributions: Equal distribution, normal distribution and linear transformation, exponential distribution and waiting processes, relationship with discrete distributions\n  ++ several continuous random variables, boundary distributions and independence, sums of random variables\n  ++ Moment generating functions for continuous random variables\n  ++ Central limit theorem\n- Inductive Statistics\n  ++ estimation variables, maximum likelihood principle, confidence intervals, hypothesis testing, statistical test development and application\n- Stochastic processes\n  ++ processes with discrete time, Markov chains, transition probabilities, arrival probabilities, transition times, return times, fundamental theorem for ergodic Markov chains"
    }
}